---
name: Cleanup Dev Files on Main Branch Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master
      - development

jobs:
  cleanup-dev-files:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove dev files
        run: |
          echo "Cleaning up dev files from ${{ github.event.pull_request.base.ref }} branch..."

          # Common dev files to remove
          files_to_remove=(
            ".claude"
            ".mcp.json"
            ".taskmaster"
            ".cursor"
            ".aider*"
            "*.dev"
            "*.tmp"
            ".DS_Store"
            "Thumbs.db"
            "dev-outputs"
            "tmp"
            ".vscode/settings.json"
            ".idea"
          )

          removed_files=()

          for pattern in "${files_to_remove[@]}"; do
            if [[ "$pattern" == *"*"* ]]; then
              # Handle patterns with wildcards
              for file in $pattern; do
                if [[ -e "$file" ]]; then
                  echo "Removing: $file"
                  rm -rf "$file"
                  removed_files+=("$file")
                fi
              done
            else
              # Handle exact file/directory names
              if [[ -e "$pattern" ]]; then
                echo "Removing: $pattern"
                rm -rf "$pattern"
                removed_files+=("$pattern")
              fi
            fi
          done

          # Log what was removed
          if [ ${#removed_files[@]} -gt 0 ]; then
            echo "Removed files/directories:"
            printf '%s\n' "${removed_files[@]}"
          else
            echo "No dev files found to remove"
          fi

      - name: Commit cleanup if files were removed
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes
          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "chore: cleanup dev files after PR merge

            Automatically removed development files that shouldn't be in the branch:
            - .claude, .mcp.json, .taskmaster (AI dev tools)
            - .cursor, .aider* (Editor configs)
            - *.dev, *.tmp (Temporary files)
            - .DS_Store, Thumbs.db (OS files)
            - dev-outputs/, tmp/ (Development directories)

            PR: #${PR_NUMBER}
            Source: ${HEAD_REF}"

            git push origin ${BASE_REF}
            echo "âœ… Dev files cleanup committed to ${BASE_REF}"
          else
            echo "âœ… No dev files to cleanup"
          fi

      - name: Add cleanup comment to PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: |
                ðŸ§¹ **Dev Files Cleanup Complete**

                Development files have been automatically removed from the target branch after merge.

                *This keeps your main branches clean while preserving dev files in feature branches.*
            })
