---
name: Cleanup Dev Files on Main Branch Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master
      - development

jobs:
  cleanup-dev-files:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove dev files
        run: |
          echo "Cleaning up dev files from ${{ github.event.pull_request.base.ref }} branch..."

          # COMPREHENSIVE Dev Files Cleanup - Safe to commit to feature branches, must be cleaned from production branches
          files_to_remove=(
            # AI Development Tools & Context
            ".claude"
            ".claude/"
            "CLAUDE.md"
            ".mcp.json"
            ".taskmaster"
            ".taskmaster/"
            ".cursor"
            ".cursor/"
            ".aider*"
            "ai_docs"
            "ai_docs/"
            
            # Python Development Artifacts
            "__pycache__"
            "__pycache__/"
            "*.pyc"
            "*.pyo"
            "*.pyd"
            ".pytest_cache"
            ".pytest_cache/"
            "htmlcov"
            "htmlcov/"
            "coverage.xml"
            "coverage.json"
            ".coverage"
            ".coverage.*"
            "pytest-report.json"
            ".mypy_cache"
            ".mypy_cache/"
            ".ruff_cache"
            ".ruff_cache/"
            
            # Build & Distribution
            "build/"
            "dist/"
            "*.egg-info"
            "*.egg-info/"
            ".tox/"
            ".nox/"
            
            # Development Directories
            "artifacts"
            "artifacts/"
            "logs"
            "logs/"
            "dev-outputs"
            "dev-outputs/"
            "tmp"
            "tmp/"
            "debug"
            "debug/"
            ".cache"
            ".cache/"
            
            # Editor & IDE Files
            ".vscode/settings.json"
            ".idea"
            ".idea/"
            "*.code-workspace"
            ".spyderproject"
            ".spyproject"
            ".ropeproject"
            
            # Temporary & OS Files
            "*.dev"
            "*.tmp"
            "*.temp"
            "*.swp"
            "*.swo"
            "*~"
            ".DS_Store"
            "Thumbs.db"
            "Thumbs.db:encryptable"
            "ehthumbs.db"
            "ehthumbs_vista.db"
            "Desktop.ini"
            "$RECYCLE.BIN/"
            "*.stackdump"
            
            # Security & Environment
            ".env.local"
            ".env.*.local"
            "secrets.json"
            ".secrets.baseline"
            
            # Performance & Profiling
            "performance_data"
            "performance_data/"
            ".prof"
            "*.prof"
            
            # Package Manager Artifacts
            "node_modules/"
            "package-lock.json"
            "yarn.lock"
            ".pixi/envs"
            
            # Backup Files
            "*.bak"
            "*.backup"
            "*.orig"
          )

          removed_files=()

          for pattern in "${files_to_remove[@]}"; do
            if [[ "$pattern" == *"*"* ]]; then
              # Handle patterns with wildcards
              for file in $pattern; do
                if [[ -e "$file" ]]; then
                  echo "Removing: $file"
                  rm -rf "$file"
                  removed_files+=("$file")
                fi
              done
            else
              # Handle exact file/directory names
              if [[ -e "$pattern" ]]; then
                echo "Removing: $pattern"
                rm -rf "$pattern"
                removed_files+=("$pattern")
              fi
            fi
          done

          # Log what was removed
          if [ ${#removed_files[@]} -gt 0 ]; then
            echo "Removed files/directories:"
            printf '%s\n' "${removed_files[@]}"
          else
            echo "No dev files found to remove"
          fi

      - name: Commit cleanup if files were removed
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes
          if [[ -n $(git status --porcelain) ]]; then
            git add -A
            git commit -m "chore: comprehensive cleanup of development artifacts after PR merge

            Automatically removed development files that shouldn't be in production branches:
            
            ü§ñ AI Development Tools:
            - CLAUDE.md, .claude/, .mcp.json, .taskmaster/, ai_docs/
            - .cursor/, .aider* (Editor AI configs)
            
            üêç Python Development Artifacts:
            - __pycache__/, *.pyc, .pytest_cache/, htmlcov/, coverage.xml
            - .mypy_cache/, .ruff_cache/, build/, dist/, *.egg-info/
            
            üìÅ Development Directories:
            - artifacts/, logs/, performance_data/, tmp/, debug/
            
            üîß Editor & IDE Files:
            - .vscode/settings.json, .idea/, *.code-workspace
            
            üóÉÔ∏è Temporary & OS Files:
            - *.tmp, *.dev, .DS_Store, Thumbs.db, *~
            
            This keeps production branches clean while preserving dev context in feature branches.
            
            PR: #${PR_NUMBER}
            Source: ${HEAD_REF}"

            git push origin ${BASE_REF}
            echo "‚úÖ Dev files cleanup committed to ${BASE_REF}"
          else
            echo "‚úÖ No dev files to cleanup"
          fi

      - name: Add cleanup comment to PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: |
                üßπ **Comprehensive Development Artifacts Cleanup Complete**

                The following development files have been automatically removed from the target branch after merge:

                - ü§ñ **AI Development Tools**: CLAUDE.md, .taskmaster/, ai_docs/, .claude/, .mcp.json
                - üêç **Python Artifacts**: __pycache__/, coverage files, build artifacts, cache directories  
                - üìÅ **Development Directories**: artifacts/, logs/, performance_data/, tmp/
                - üîß **Editor Configs**: .vscode/, .idea/, editor-specific files
                - üóÉÔ∏è **Temporary Files**: *.tmp, *.dev, OS-specific files

                **Philosophy**: Development files are valuable during feature work and preserved in feature branches, but automatically cleaned from production branches to maintain repository hygiene.

                *This methodology allows relaxed development practices while ensuring clean production branches.*
            })
