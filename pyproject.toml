[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ci-framework-tools"
version = "0.0.1"
description = "Internal tools and scripts for the CI Framework."
authors = [
    { name = "MementoRC", email = "your-email@example.com" }
]
dependencies = [
    "pytest",
    "psutil",
    "pandas",
    "pyyaml",
    "requests",
]
requires-python = ">=3.10"

[project.optional-dependencies]
dev = [
    "ruff",
    "black",
    "yamllint",
    "pip-audit",
    "bandit",
    "detect-secrets",
    "twine",
    "build",
    "cyclonedx-bom",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "psutil",
    "pandas",
    "pyyaml",
    "requests",
]

[tool.hatch.envs.dev]
dependencies = [
    "ruff",
    "black",
    "yamllint",
    "pip-audit",
    "bandit",
    "detect-secrets",
    "twine",
    "build",
    "cyclonedx-bom",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest",
]

[tool.pixi]

[tool.pixi.project]
name = "ci-framework-tools"
version = "0.0.1"
channels = ["conda-forge"]
platforms = ["linux-64"]

# Core dependencies for the default environment
[tool.pixi.dependencies]
python = "3.12.*"
pytest = "*"
psutil = "*"
pandas = "*"
pyyaml = "*"
requests = "*"
hypothesis = "*"

# Development tools and dependencies for the 'dev' environment
[tool.pixi.feature.dev.dependencies]
ruff = "*"
black = "*"
yamllint = "*"
actionlint = "*"
pip-audit = "*"
bandit = "*"
bc-detect-secrets = "*"
twine = "*"
python-build = "*"
cyclonedx-bom = "*"
filelock = "*"

# Pixi environments referencing features
[tool.pixi.environments]
default = { features = [], solve-group = "default" }
dev = { features = ["dev"], solve-group = "dev" }

# Ensure proper environment isolation
[tool.pixi.activation]
env = { PYTHONNOUSERSITE = "1" }

[tool.pixi.tasks]
lint = "ruff check framework/"
format = "black --check framework/"
yaml-lint = "yamllint .github/workflows/"
action-lint = "actionlint"
security-audit = "pip-audit --verbose"
bandit-scan = "bandit -r framework/ -x framework/tests/ -s B101"
detect-secrets = "detect-secrets scan --all-files"
unit-test = "pytest framework/tests/"

# Bandit security scanning configuration
[tool.bandit]
exclude_dirs = ["framework/tests"]
skips = ["B101"]  # Allow assert statements in test files
targets = ["framework"]

# Security decisions for CI framework:
# B404: subprocess import - Required for CI functionality, used securely with validation
# B603: subprocess call - Used with shell=False and comprehensive input validation

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests",
    "property: marks tests as property-based tests",
    "security: marks tests as security tests",
    "reporting: marks tests as reporting tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]
